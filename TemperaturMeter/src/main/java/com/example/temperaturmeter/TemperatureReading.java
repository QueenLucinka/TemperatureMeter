package com.example.temperaturmeter;
// Defines the package for this class, grouping related classes under com.example.temperaturmeter.

import jakarta.persistence.*;
// Imports the Jakarta Persistence API (JPA) annotations and classes needed for defining entity mappings and persistence logic.

import java.time.LocalDateTime;
// Imports the LocalDateTime class to handle timestamps for the temperature readings.

@Entity
// Marks this class as a JPA entity, meaning it will be mapped to a database table.
@Table(name = "temp_reading")
// Specifies the table name in the database that this entity will map to ("temp_reading").

public class TemperatureReading {
    // This is the entity class representing temperature readings in the database.

    @Id
    // Marks the 'id' field as the primary key of the entity.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    // Specifies that the primary key will be automatically generated by the database using an identity column.
    private Long id;
    // The unique identifier for each temperature reading (auto-generated).

    @Column(nullable = false)
    // Maps the 'temperature' field to a database column and enforces that it cannot be null.
    private Double temperature;
    // Stores the temperature value for the reading.

    @Column(columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    // Maps the 'timestamp' field to a database column and sets the default value to the current timestamp.
    private LocalDateTime timestamp;
    // Stores the timestamp when the temperature reading was recorded.

    // Constructor to automatically set the timestamp
    public TemperatureReading() {
        this.timestamp = LocalDateTime.now();
        // Sets the timestamp to the current date and time when a new TemperatureReading object is created.
    }

    // Getters and setters...

    public Long getId() {
        return id;
    }
    // Getter method for 'id' field, used to retrieve the ID of a temperature reading.

    public void setId(Long id) {
        this.id = id;
    }
    // Setter method for 'id' field, used to assign a value to the ID (usually auto-generated).

    public Double getTemperature() {
        return temperature;
    }
    // Getter method for 'temperature' field, used to retrieve the temperature value.

    public void setTemperature(Double temperature) {
        this.temperature = temperature;
    }
    // Setter method for 'temperature' field, used to assign a temperature value to the reading.

    public LocalDateTime getTimestamp() {
        return timestamp;
    }
    // Getter method for 'timestamp' field, used to retrieve the timestamp when the reading was recorded.

    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }
    // Setter method for 'timestamp' field, used to manually assign a timestamp value (optional).
}

/*
Annotations:

@Entity:
    Marks the class as a JPA entity, meaning it is mapped to a table in the database.

@Table(name = "temp_reading"):
    Specifies the database table name.

@Id:
    Indicates the primary key field (id).

@GeneratedValue(strategy = GenerationType.IDENTITY):
    Specifies that the id is auto-generated by the database.

@Column:
    Maps the fields (temperature, timestamp) to columns in the database.
    It also specifies constraints like nullable = false and default values.

Constructor:
    The constructor automatically sets the timestamp to the current date and time
    when a new TemperatureReading object is created.

Getters and Setters:
    These methods allow for the retrieval and modification of id, temperature, and timestamp values.
    They're standard in Java entity classes to provide access to private fields.

* */